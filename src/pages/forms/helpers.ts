import { InitialFormType } from "./types"

export const generateAgeOptions = () => {
    const start = 14
    const end = 100
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => {
        let ageWord = "–ª–µ—Ç"
        const lastTwoDigits = number % 100
        const lastDigit = number % 10

        if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
            ageWord = "–ª–µ—Ç"
        } else if (lastDigit === 1) {
            ageWord = "–≥–æ–¥"
        } else if (lastDigit >= 2 && lastDigit <= 4) {
            ageWord = "–≥–æ–¥–∞"
        }

        return { label: `${number} ${ageWord}`, value: number }
    })
}
export const generateHeightOptions = () => {
    const start = 100
    const end = 220
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} —Å–º`, value: number }))
}
export const generateInitialWeightOptions = () => {
    const start = 40
    const end = 150
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} –∫–≥`, value: number }))
}
export const generateCurrentWeightOptions = () => {
    const start = 40
    const end = 80
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} –∫–≥`, value: number }))
}
export const generateWaistLength = () => {
    const start = 50
    const end = 120
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} —Å–º`, value: number }))
}
export const generateNeckLength = () => {
    const start = 30
    const end = 70
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} —Å–º`, value: number }))
}
export const generateHipsLength = () => {
    const start = 40
    const end = 130
    const range = [...Array(end - start + 1).keys()].map((x) => x + start)
    return range.map((number) => ({ label: `${number} —Å–º`, value: number }))
}
export const calculateMaleBodyFatPercentage = (form: Partial<InitialFormType>) => {
    const { waistLength, neckLength, height } = form
    return (
        495 / (1.0324 - 0.19077 * Math.log10(waistLength - neckLength) + 0.15456 * Math.log10(height)) -
        450
    ).toFixed(2)
}
export const calculateFemaleBodyFatPercentage = (form: Partial<InitialFormType>) => {
    const { waistLength, neckLength, height, hipsLength } = form
    return (
        495 / (1.29579 - 0.35004 * Math.log10(waistLength + hipsLength - neckLength) + 0.221 * Math.log10(height)) -
        450
    ).toFixed(2)
}
export const calculateIdealWeight = (form: InitialFormType) => {
    const { height, gender } = form
    const index = gender === "FEMALE" ? 21.5 : 23
    return (index * Math.pow(height / 100, 2)).toFixed(0)
}

export const generateWaterOptions = () => {
    const start = 1
    const end = 30
    const range = [...Array(end - start + 1).keys()].map((x) => (x + start) * 100)
    return range.map((number) => ({ label: `${number} –º–ª`, value: number }))
}

export const getPhysicalOptions = () => {
    const values = [
        {
            emoji: "ü•Ä",
            label: "–ò—Å—Ç–æ—â–µ–Ω–∏–µ",
        },
        {
            emoji: "üí¢",
            label: "–£—Ç–æ–º–ª–µ–Ω–∏–µ",
        },
        {
            emoji: "üîÜ",
            label: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
        },
        {
            emoji: "üí™",
            label: "–ë–æ–¥—Ä–æ—Å—Ç—å",
        },
        {
            emoji: "‚ö°Ô∏è",
            label: "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å",
        },
    ]
    return values.map((item) => ({ ...item, value: `${item.emoji} ${item.label}` }))
}
export const getEmotionalOptions = () => {
    const values = [
        {
            emoji: "üò¢",
            label: "–£–Ω—ã–Ω–∏–µ",
        },
        {
            emoji: "üòî",
            label: "–ì—Ä—É—Å—Ç—å",
        },
        {
            emoji: "üòå",
            label: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
        },
        {
            emoji: "üòÉ",
            label: "–†–∞–¥–æ—Å—Ç—å",
        },
        {
            emoji: "ü§©",
            label: "–°—á–∞—Å—Ç—å–µ",
        },
    ]
    return values.map((item) => ({ ...item, value: `${item.emoji} ${item.label}` }))
}

export const getActivityTypeOptions = () => {
    const values = [
        {
            emoji: "üö∂",
            label: "–ü—Ä–æ–≥—É–ª–∫–∞",
        },
        {
            emoji: "ü§∏",
            label: "–ó–∞—Ä—è–¥–∫–∞",
        },
        {
            emoji: "üèãÔ∏è",
            label: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
        },
        {
            emoji: "üèä",
            label: "–ü–ª–∞–≤–∞–Ω–∏–µ",
        },
        {
            emoji: "üö¥",
            label: "–í–µ–ª–æ—Å–∏–ø–µ–¥",
        },
        {
            emoji: "üèì",
            label: "–î—Ä—É–≥–æ–µ",
        },
    ]
    return values.map((item) => ({ ...item, value: `${item.emoji} ${item.label}` }))
}

export const getFoodTypeOptions = () => {
    const values = [
        {
            emoji: "ü•™",
            label: "–ó–∞–≤—Ç—Ä–∞–∫",
        },
        {
            emoji: "üçù",
            label: "–û–±–µ–¥",
        },
        {
            emoji: "ü•ó",
            label: "–£–∂–∏–Ω",
        },
        {
            emoji: "ü•®",
            label: "–ü–µ—Ä–µ–∫—É—Å",
        },
    ]
    return values.map((item) => ({ ...item, value: `${item.emoji} ${item.label}` }))
}
